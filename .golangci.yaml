linters-settings:
  goimports:
    local-prefixes: github.com/golangci/golangci-lint
  govet:
    check-shadowing: false
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
  nolintlint:
    allow-leading-space: true # don't require machine-readable nolint directives (i.e. with no leading space)
    allow-unused: true # report any unused nolint directives
    require-explanation: false # don't require an explanation for nolint directives
    require-specific: false # don't require nolint directives to be specific about which linter is being skipped

linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    - asciicheck        # Simple linter to check that your code does not contain non-ASCII identifiers
    - bodyclose         # checks whether HTTP response body is closed successfully
    - errcheck          # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - exportloopref     # checks for pointers to enclosing loop variables
    - gofumpt           # Gofmt alternative
    - goimports         # Goimports does everything that gofmt does. Additionally it checks unused imports
    - gosec             # Inspects source code for security problems
    - gosimple          # Linter for Go source code that specializes in simplifying a code
    - govet             # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign       # Detects when assignments to existing variables are not used
    - noctx             # noctx finds sending http request without context.Context
    - nolintlint        # Reports ill-formed or insufficient nolint directives
    - rowserrcheck      # Checks whether Err of rows is checked successfully
    - staticcheck       # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - structcheck       # Finds unused struct fields
    - typecheck         # Like the front-end of a Go compiler, parses and type-checks Go code
    - unconvert         # Remove unnecessary type conversions
    - unparam           # Reports unused function parameters

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - path: _test\.go
      linters:
        - gomnd

    # https://github.com/go-critic/go-critic/issues/926
    - linters:
        - gocritic
      text: "unnecessaryDefer:"
  exclude:
    - Using the variable on range scope `tc` in function literal

  #  new-from-rev: c24624250c0b0e354b7f2fdee1a1213b68156d47

run:
  skip-dirs:
    - mocks
    - docs

  skip-files:
    - ".*.pb.go$"

# golangci.com configuration
# https://github.com/golangci/golangci/wiki/Configuration
service:
  golangci-lint-version: 1.30.x # use the fixed version to not introduce new linters unexpectedly
  prepare:
    - echo "here I can run custom commands, but no preparation needed for this repo"